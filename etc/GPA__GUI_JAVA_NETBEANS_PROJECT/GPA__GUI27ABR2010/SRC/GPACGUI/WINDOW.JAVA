/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Window.java
 *
 * Created on Oct 16, 2009, 7:16:03 PM
 */
package gpacgui;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cristiano
 */
public class Window extends javax.swing.JFrame {

    String fileName, resultdir;
    Thread threadcampovetorial;
    Thread threadcampovetorialass;
    Thread threadtriangulacao;
    Thread threadoriginal;
    Thread threadgradx;
    Thread threadgrady;
    Thread threadshowlog;
    Thread threadnormalizada;
    FileReader reader = null;
    String filePath;
    private BufferedReader leitor;
    private String linha;
    private int lines;
    DataOutputStream dados;
    private FileOutputStream file;
    private String destiny;

    private double bringG1(String str) {
        double G1 = 0;
        try {
            reader = new FileReader(new File(str));
            leitor = new BufferedReader(reader);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            while ((linha = leitor.readLine()) != null) {
                String[] col = linha.split(" ");
                String s1 = col[0];
                if (col[0].toString().equals("g1:")) {
                    G1 = Double.parseDouble(col[1].toString());

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            leitor.close();
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        return G1;
    }

    static class waypoint {

        int x, y;
    }
    static waypoint w1 = null;
    double mx[][] = new double[3][3];

    /** Creates new form Window */
    public Window() {

        initComponents();
        Main.home = System.getProperty("user.home");
        Main.currentdir = Main.home;
    }
    SpinnerModel modeltau = new SpinnerNumberModel(0.0000, //initial value
            0.0000, //min
            null, //max
            0.0001);
//    ((JSpinner.NumberEditor)jSpinnertau.getEditor()).getFormat().setMaximumFractionDigits(4);
    SpinnerModel modeldelta = new SpinnerNumberModel(0.00, //initial value
            0.00, //min
            null, //max
            0.01);

    /** This method is called from within the constructor to
     * initialize the form.m
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        triangpoint = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldInArq = new javax.swing.JTextField();
        jButtonIn = new javax.swing.JButton();
        jButtonOut = new javax.swing.JButton();
        jTextFieldOutArq = new javax.swing.JTextField();
        jCheckBoxEntireDir = new javax.swing.JCheckBox();
        jButtonGPAtools = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jRadioButtonMeio = new javax.swing.JRadioButton();
        jRadioButtonPonta = new javax.swing.JRadioButton();
        jRadioButtonOrigem = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jSpinnertau = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinnerdelta = new javax.swing.JSpinner();
        jCheckBoxLOG = new javax.swing.JCheckBox();
        jButtonMostrarLog = new javax.swing.JButton();
        jCheckBoxNormalizarMax = new javax.swing.JCheckBox();
        jCheckBoxNormalizarAmp = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxSearch = new javax.swing.JComboBox();
        jPanel11 = new javax.swing.JPanel();
        jButtonMatriz = new javax.swing.JButton();
        jButtonNormalizada = new javax.swing.JButton();
        jButtonGradX = new javax.swing.JButton();
        jButtonCampo = new javax.swing.JButton();
        jButtonGradY = new javax.swing.JButton();
        jButtonCampoAss = new javax.swing.JButton();
        jButtonTriangulacao = new javax.swing.JButton();
        jTextFieldl = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldG1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldV = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldG2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldL = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldG3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldI = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldg1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldG1g1 = new javax.swing.JTextField();
        jButtonStartGPA = new javax.swing.JButton();
        jButtonResetClear = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jButtonAbout = new javax.swing.JButton();
        jButtonG1g1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Arquivo / Pasta"));

        jTextFieldInArq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldInArqKeyPressed(evt);
            }
        });

        jButtonIn.setText("Selecionar");
        jButtonIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInActionPerformed(evt);
            }
        });

        jButtonOut.setText("Diretório de Destino");
        jButtonOut.setEnabled(false);
        jButtonOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutActionPerformed(evt);
            }
        });

        jTextFieldOutArq.setEditable(false);

        jCheckBoxEntireDir.setText("Analisar todos os arquivos do diretório");
        jCheckBoxEntireDir.setToolTipText("Aplicar a todos os arquivos deste diretório");
        jCheckBoxEntireDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEntireDirActionPerformed(evt);
            }
        });

        jButtonGPAtools.setText("GPA tools");
        jButtonGPAtools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGPAtoolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldInArq, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(jCheckBoxEntireDir))
                    .addComponent(jTextFieldOutArq, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 300, Short.MAX_VALUE)
                        .addComponent(jButtonGPAtools)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonIn, jButtonOut});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonIn)
                    .addComponent(jCheckBoxEntireDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldInArq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOut)
                    .addComponent(jButtonGPAtools))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOutArq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Triangulação"));
        jPanel5.setToolTipText("");

        triangpoint.add(jRadioButtonMeio);
        jRadioButtonMeio.setSelected(true);
        jRadioButtonMeio.setText("Meio");
        jRadioButtonMeio.setToolTipText("Faz a triangulação através do meio do vetor.");
        jRadioButtonMeio.setEnabled(false);
        jRadioButtonMeio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMeioActionPerformed(evt);
            }
        });

        triangpoint.add(jRadioButtonPonta);
        jRadioButtonPonta.setText("Ponta");
        jRadioButtonPonta.setToolTipText("Faz a triangulação a partir da ponta do vetor.");
        jRadioButtonPonta.setEnabled(false);
        jRadioButtonPonta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPontaActionPerformed(evt);
            }
        });

        triangpoint.add(jRadioButtonOrigem);
        jRadioButtonOrigem.setText("Origem");
        jRadioButtonOrigem.setToolTipText("Faz a triangulação a partir da base do vetor.");
        jRadioButtonOrigem.setEnabled(false);
        jRadioButtonOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonOrigemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonOrigem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonMeio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonPonta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jRadioButtonOrigem)
                .addComponent(jRadioButtonMeio)
                .addComponent(jRadioButtonPonta))
        );

        jLabel1.setText("tau");

        jSpinnertau.setModel(modeltau);
        jSpinnertau.setEnabled(false);
        jSpinnertau.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnertauStateChanged(evt);
            }
        });

        jLabel2.setText("delta");

        jSpinnerdelta.setModel(modeldelta);
        jSpinnerdelta.setEnabled(false);
        jSpinnerdelta.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerdeltaStateChanged(evt);
            }
        });

        jCheckBoxLOG.setText("Criar Log");
        jCheckBoxLOG.setToolTipText("Gera log em arquivo de todas as comparações de vetores durante a etapa de remoção dos pares de vetores simétricos.");
        jCheckBoxLOG.setEnabled(false);
        jCheckBoxLOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLOGActionPerformed(evt);
            }
        });

        jButtonMostrarLog.setText("Mostrar Log");
        jButtonMostrarLog.setToolTipText("Mostra comparações de vetores em busca de pares simétricos");
        jButtonMostrarLog.setEnabled(false);
        jButtonMostrarLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarLogActionPerformed(evt);
            }
        });

        jCheckBoxNormalizarMax.setSelected(true);
        jCheckBoxNormalizarMax.setText("Normalizar matriz pelo critério de máximo");
        jCheckBoxNormalizarMax.setToolTipText("Normaliza matriz de entrada.");
        jCheckBoxNormalizarMax.setEnabled(false);
        jCheckBoxNormalizarMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNormalizarMaxActionPerformed(evt);
            }
        });

        jCheckBoxNormalizarAmp.setText("Normalizar matriz pelo critério de amplitude");
        jCheckBoxNormalizarAmp.setToolTipText("Normaliza matriz de entrada.");
        jCheckBoxNormalizarAmp.setEnabled(false);
        jCheckBoxNormalizarAmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNormalizarAmpActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Busca"));

        jComboBoxSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Original", "Alt", "Central", "Axial" }));
        jComboBoxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        ((JSpinner.NumberEditor)jSpinnertau.getEditor()).getFormat().setMaximumFractionDigits(4);
        ((JSpinner.NumberEditor)jSpinnertau.getEditor()).getFormat().setMinimumFractionDigits(4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinnerdelta)
                            .addComponent(jSpinnertau, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxNormalizarMax)
                    .addComponent(jCheckBoxNormalizarAmp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonMostrarLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxLOG)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCheckBoxLOG, jPanel4});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jSpinnertau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jSpinnerdelta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBoxLOG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonMostrarLog))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBoxNormalizarMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxNormalizarAmp)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonMostrarLog, jCheckBoxLOG});

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Gradient Pattern Analysis"));

        jButtonMatriz.setText("Matriz");
        jButtonMatriz.setEnabled(false);
        jButtonMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMatrizActionPerformed(evt);
            }
        });

        jButtonNormalizada.setText("Matriz Normalizada");
        jButtonNormalizada.setEnabled(false);
        jButtonNormalizada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNormalizadaActionPerformed(evt);
            }
        });

        jButtonGradX.setText("Grad X");
        jButtonGradX.setEnabled(false);
        jButtonGradX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGradXActionPerformed(evt);
            }
        });

        jButtonCampo.setText("Campo Vetorial");
        jButtonCampo.setEnabled(false);
        jButtonCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCampoActionPerformed(evt);
            }
        });

        jButtonGradY.setText("Grad Y");
        jButtonGradY.setEnabled(false);
        jButtonGradY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGradYActionPerformed(evt);
            }
        });

        jButtonCampoAss.setText("Campo Vetorial Asimétirco");
        jButtonCampoAss.setEnabled(false);
        jButtonCampoAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCampoAssActionPerformed(evt);
            }
        });

        jButtonTriangulacao.setText("Triangulação");
        jButtonTriangulacao.setEnabled(false);
        jButtonTriangulacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTriangulacaoActionPerformed(evt);
            }
        });

        jTextFieldl.setEditable(false);
        jTextFieldl.setToolTipText("linhas");

        jLabel8.setText("x");
        jLabel8.setToolTipText("Número de Vetores Assimétricos");

        jTextFieldc.setEditable(false);
        jTextFieldc.setToolTipText("colunas");

        jLabel5.setText("G1");

        jTextFieldG1.setEditable(false);
        jTextFieldG1.setToolTipText("Coeficiente de assimetria");

        jLabel9.setText("V:");
        jLabel9.setToolTipText("Número de Vetores");

        jTextFieldV.setEditable(false);
        jTextFieldV.setToolTipText("Número de vetores");

        jLabel6.setText("G2");
        jLabel6.setEnabled(false);

        jTextFieldG2.setEditable(false);
        jTextFieldG2.setToolTipText("");
        jTextFieldG2.setEnabled(false);

        jLabel3.setText("L:");
        jLabel3.setToolTipText("Número de Vetores Assimétricos");

        jTextFieldL.setEditable(false);
        jTextFieldL.setToolTipText("Número de vetores triangulados");

        jLabel7.setText("G3");
        jLabel7.setEnabled(false);

        jTextFieldG3.setEditable(false);
        jTextFieldG3.setToolTipText("");
        jTextFieldG3.setEnabled(false);

        jLabel4.setText("I:");
        jLabel4.setToolTipText("Número de Linhas de Triangulação");

        jTextFieldI.setEditable(false);
        jTextFieldI.setToolTipText("Número de linhas de triangulação.");

        jLabel10.setText("<g1>");

        jTextFieldg1.setEditable(false);
        jTextFieldg1.setToolTipText("");

        jLabel11.setText("G1-<g1>");

        jTextFieldG1g1.setEditable(false);
        jTextFieldG1g1.setToolTipText("");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldG1g1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jTextFieldl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldc, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldI)
                                    .addComponent(jTextFieldL)
                                    .addComponent(jTextFieldV, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldG2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldG1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldg1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldG3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonGradY)
                    .addComponent(jButtonMatriz)
                    .addComponent(jButtonGradX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonTriangulacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCampoAss, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonNormalizada))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel9});

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonCampo, jButtonCampoAss, jButtonNormalizada, jButtonTriangulacao});

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldc, jTextFieldl});

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonGradX, jButtonGradY, jButtonMatriz});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTextFieldl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldG1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMatriz)
                    .addComponent(jButtonNormalizada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldG2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGradX)
                    .addComponent(jButtonCampo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldG3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGradY)
                    .addComponent(jButtonCampoAss))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldg1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTriangulacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldG1g1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel9});

        jButtonStartGPA.setText("Start GPA");
        jButtonStartGPA.setToolTipText("Fazer Análise de Padrões Gradientes.");
        jButtonStartGPA.setEnabled(false);
        jButtonStartGPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartGPAActionPerformed(evt);
            }
        });

        jButtonResetClear.setFont(new java.awt.Font("Dialog", 0, 12));
        jButtonResetClear.setText("Reset/Clear");
        jButtonResetClear.setEnabled(false);
        jButtonResetClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetClearActionPerformed(evt);
            }
        });

        jButtonSair.setFont(new java.awt.Font("Dialog", 0, 12));
        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jButtonAbout.setFont(new java.awt.Font("Dialog", 0, 12));
        jButtonAbout.setText("About");
        jButtonAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAboutActionPerformed(evt);
            }
        });

        jButtonG1g1.setText("G1-<g1>");
        jButtonG1g1.setEnabled(false);
        jButtonG1g1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonG1g1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonG1g1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStartGPA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonResetClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAbout, jButtonResetClear, jButtonSair});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonG1g1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonStartGPA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonResetClear, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonSair, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAbout, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonAbout, jButtonSair});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInActionPerformed
        // TODO add your handling code here:
        String f, f1, f2, f3, parentdir;
        Boolean flag = false;
        JFileChooser chooser = new JFileChooser(Main.currentdir);
        if (jCheckBoxEntireDir.isSelected()) {
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("DAT Files", "dat", "txt");
            chooser.setFileFilter(filter);
//            chooser.set
            flag = true;
        }
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getName();
            Main.filePath = chooser.getSelectedFile().getPath();
            parentdir = chooser.getSelectedFile().getParent();
            jTextFieldInArq.setText(Main.filePath);
            Main.currentdir = parentdir;
            resultdir = parentdir;
            jButtonG1g1.setEnabled(true);
            if (flag) {
                resultdir = Main.filePath;
                jButtonCampo.setEnabled(false);
                jButtonCampoAss.setEnabled(false);
                jButtonGPAtools.setEnabled(false);
                jButtonG1g1.setEnabled(false);
            }
            Main.outdir = resultdir + "/";
            jTextFieldOutArq.setText(Main.outdir);

            String[] temp = null;
            temp = Main.filePath.split("/");
            int end = temp.length;
            Main.destiny = temp[end - 1];
            end = Main.destiny.length();
            if (!flag) {
                Main.destiny = Main.destiny.substring(0, end - 4);
            }
//            Main.destiny.concat("_gpa++_OUT/");
            Main.destiny = Main.destiny + "_gpa++_OUT/";

            jCheckBoxEntireDir.setEnabled(false);

            jSpinnertau.setEnabled(true);
            jSpinnerdelta.setEnabled(true);
            jRadioButtonOrigem.setEnabled(true);
            jRadioButtonMeio.setEnabled(true);
            jRadioButtonPonta.setEnabled(true);
            jCheckBoxLOG.setEnabled(true);
            jCheckBoxNormalizarMax.setEnabled(true);
            jCheckBoxNormalizarAmp.setEnabled(true);
            jComboBoxSearch.setEnabled(true);
            jButtonStartGPA.setEnabled(true);
            jButtonResetClear.setEnabled(true);
//            Robot robot = new Robot();

        }
    }//GEN-LAST:event_jButtonInActionPerformed

    private void jButtonOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getName();
            Main.filePath = chooser.getSelectedFile().getPath();
            jTextFieldOutArq.setText(Main.filePath);
        }
    }//GEN-LAST:event_jButtonOutActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        // TODO add your handling code here:
        Main.tela.dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private int process(String str, String code) {
        String s, I, L, G1, s1, l, c, V;
        I = "";
        L = "";
        G1 = "";
        l = "";
        c = "";
        V = "";
        int i = 0;
        s = Character.toString(str.charAt(i++));
        s = s + Character.toString(str.charAt(i++));
        s = s + Character.toString(str.charAt(i++));
        while (!s.equals(code)) {
            s1 = Character.toString(s.charAt(1));
            s1 = s1 + Character.toString(s.charAt(2));
            if (i < str.length()) {
                s = s1 + Character.toString(str.charAt(i++));
            } else {
                return 0;
            }
        }
//        i = i + 1;
        for (int j = i; j < str.length(); j++) {
            L = L + Character.toString(str.charAt(i++));
        }
        if (code.equals("L: ")) {
            jTextFieldL.setText(L);
        } else if (code.equals("I: ")) {
            jTextFieldI.setText(L);
        } else if (code.equals("1: ")) {
            jTextFieldG1.setText(L);
        } else if (code.equals("l: ")) {
            jTextFieldl.setText(L);
        } else if (code.equals("c: ")) {
            jTextFieldc.setText(L);
        } else if (code.equals("V: ")) {
            jTextFieldV.setText(L);
        }
        return 0;
    }

    public void collectValues() {
        String saida = Main.filePath;
        String s = "";
        int size = saida.length();
        for (int i = 0; i < (size - 4); i++) {
            s = s + Character.toString(saida.charAt(i));
        }

        saida = s + "_gpa++_OUT/Resultados.dat";

        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "V: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "c: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "l: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "L: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "I: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(saida));
            String str;
            while ((str = in.readLine()) != null) {
                int z = process(str, "1: ");
            }
            in.close();
        } catch (IOException e) {
            System.out.println("IOException e" + e);
        }
    }

    void GPAit(String target) {
        {
            jButtonIn.setEnabled(false);
            jTextFieldInArq.setEditable(false);
            jButtonOut.setEnabled(false);
            jTextFieldOutArq.setEditable(false);
            jButtonStartGPA.setEnabled(false);
            jButtonResetClear.setEnabled(true);
            jButtonGPAtools.setEnabled(false);
            jButtonG1g1.setEnabled(false);
        }
        String tau, delta, log, norm, ref, inv = null;
//        target = Main.filePath;

        tau = jSpinnertau.getValue().toString();
        double dtau = Double.parseDouble(tau);
        DecimalFormat fourDForm = new DecimalFormat("#.####");
        tau = fourDForm.format(dtau);

        delta = jSpinnerdelta.getValue().toString();
        double ddelta = Double.parseDouble(delta);
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        delta = twoDForm.format(ddelta);

        if (jCheckBoxLOG.isSelected()) {
            log = "on";
        } else {
            log = "off";
        }
        if (jCheckBoxNormalizarMax.isSelected()) {
            norm = "max";
        } else if (jCheckBoxNormalizarAmp.isSelected()) {
            norm = "amp";
        } else {
            norm = "not";
        }
        if (jRadioButtonOrigem.isSelected()) {
            ref = "ori";
        } else if (jRadioButtonPonta.isSelected()) {
            ref = "pon";
        } else {
            ref = "mei";
        }
        String seach = jComboBoxSearch.getSelectedItem().toString();
        if (seach.equals("Original")) { // Aqui
            inv = "ori";
        } else if (seach.equals("Alt")) {
            inv = "alt";
        } else if (seach.equals("Central")) {
            inv = "cen";
        } else if (seach.equals("Axial")) {
            inv = "axi";
        } else {
            System.out.println("Troubles.");
        }
        WriteConf2File(tau, delta, log, norm, ref, inv);

        String[] command = {"/usr/bin/xterm", "-e", Main.home + "/GPA++/bin/gpa++", target};

        Runtime r = Runtime.getRuntime();
        Process p;
        try {
            Main.tela.setVisible(false);
            p = r.exec(command);
            try {
                p.waitFor();
                Main.tela.setVisible(true);
            } catch (InterruptedException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line = "";

            while ((line = b.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!jCheckBoxEntireDir.isSelected()) {
            collectValues();
            jButtonCampo.setEnabled(true);
            jButtonCampoAss.setEnabled(true);
            jButtonTriangulacao.setEnabled(true);
            jButtonMatriz.setEnabled(true);
            jButtonGradX.setEnabled(true);
            jButtonGradY.setEnabled(true);

            if (jCheckBoxLOG.isSelected()) {
                jButtonMostrarLog.setEnabled(true);
            }
            if (jCheckBoxNormalizarMax.isSelected() | jCheckBoxNormalizarAmp.isSelected()) {
                jButtonNormalizada.setEnabled(true);
            } else {
                jButtonNormalizada.setEnabled(false);
            }
        }
    }

    private void jButtonStartGPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartGPAActionPerformed
        // TODO add your handling code here:
        GPAit(Main.filePath);
    }//GEN-LAST:event_jButtonStartGPAActionPerformed

    private void jButtonAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAboutActionPerformed
        // TODO add your handling code here:
        String target = "-about";
//        String[] Command = {"/usr/bin/xterm", "-hold", "-e", "gpa++", "-about"};
        String[] Command = {"/usr/bin/xterm", "-hold", "-e", Main.home + "/GPA++/bin/gpa++", target};
        Runtime r = Runtime.getRuntime();
        Process p;
        try {
            p = r.exec(Command);
            try {
                p.waitFor();
            } catch (InterruptedException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line = "";

            while ((line = b.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAboutActionPerformed

    public class threadCampoVetorial implements Runnable {

        public void run() {
            jButtonCampo.setEnabled(false);
            String target, f1, f2, epsfile;
            int end;
            end = Main.filePath.length();
            f1 = Main.filePath.substring(0, end - 4);
            f2 = f1 + "_gpa++_OUT/";
            epsfile = "gradfield.eps";
            target = f2 + epsfile;
            String[] command = {"/usr/bin/gv", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonCampo.setEnabled(true);
        }
    }

    public class threadCampoVetorialAss implements Runnable {

        public void run() {
            jButtonCampoAss.setEnabled(false);
            String target, f1, f2, epsfile;
            int end;
            end = Main.filePath.length();
            f1 = Main.filePath.substring(0, end - 4);
            f2 = f1 + "_gpa++_OUT/";
            epsfile = "gradfieldasym.eps";
            target = f2 + epsfile;
            String[] command = {"/usr/bin/gv", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonCampoAss.setEnabled(true);
        }
    }

    public class threadTriangulacao implements Runnable {

        public void run() {
            jButtonTriangulacao.setEnabled(false);
            String target, f1, f2, epsfile;
            int end;
            end = Main.filePath.length();
            f1 = Main.filePath.substring(0, end - 4);
            f2 = f1 + "_gpa++_OUT/";
            epsfile = "triangulation.eps";
            target = f2 + epsfile;
            String[] command = {"/usr/bin/gv", "-scale=-3", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonTriangulacao.setEnabled(true);
        }
    }

    public class threadGradY implements Runnable {

        public void run() {
            jButtonGradY.setEnabled(false);
            String target;
            target = Main.outdir + Main.destiny + "GradY.dat";
            String[] command = {"/usr/bin/xterm", "-hold", "-e", "/bin/more", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonGradY.setEnabled(true);
        }
    }

    public class threadGradX implements Runnable {

        public void run() {
            jButtonGradX.setEnabled(false);
            String target;
            target = Main.outdir + Main.destiny + "GradX.dat";
            String[] command = {"/usr/bin/xterm", "-hold", "-e", "/bin/more", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonGradX.setEnabled(true);
        }
    }

    public class threadShowLog implements Runnable {

        public void run() {
            jButtonMostrarLog.setEnabled(false);
            String target;
            target = Main.outdir + Main.destiny + "Comparacoes.dat";
            String[] command = {"/usr/bin/xterm", "-hold", "-e", "/bin/more", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonMostrarLog.setEnabled(true);
        }
    }

    public class threadNormalizada implements Runnable {

        public void run() {
            jButtonNormalizada.setEnabled(false);
            String target;
            target = Main.outdir + Main.destiny + "Normalizada.dat";
            String[] command = {"/usr/bin/xterm", "-hold", "-e", "/bin/more", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonNormalizada.setEnabled(true);
        }
    }

    public class threadOriginal implements Runnable {

        public void run() {
            jButtonMatriz.setEnabled(false);
            String target;
            target = Main.filePath;
            String[] command = {"/usr/bin/xterm", "-hold", "-e", "/bin/more", target};

            Runtime r = Runtime.getRuntime();
            Process p;
            try {
//            Main.tela.setVisible(false);
                p = r.exec(command);
                try {
                    p.waitFor();
//                Main.tela.setVisible(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
                BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()));
                String line = "";

                while ((line = b.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButtonMatriz.setEnabled(true);
        }
    }

    private void jButtonCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCampoActionPerformed
        // TODO add your handling code here:
        threadcampovetorial = new Thread(new threadCampoVetorial());
        threadcampovetorial.start();
    }//GEN-LAST:event_jButtonCampoActionPerformed

    private void jButtonCampoAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCampoAssActionPerformed
        // TODO add your handling code here:
        threadcampovetorialass = new Thread(new threadCampoVetorialAss());
        threadcampovetorialass.start();
    }//GEN-LAST:event_jButtonCampoAssActionPerformed

    private void jButtonTriangulacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTriangulacaoActionPerformed
        // TODO add your handling code here:
        threadtriangulacao = new Thread(new threadTriangulacao());
        threadtriangulacao.start();
    }//GEN-LAST:event_jButtonTriangulacaoActionPerformed

    private void jButtonMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMatrizActionPerformed
        // TODO add your handling code here:
        threadoriginal = new Thread(new threadOriginal());
        threadoriginal.start();
    }//GEN-LAST:event_jButtonMatrizActionPerformed

    private void jButtonGradYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGradYActionPerformed
        // TODO add your handling code here:
        threadgradx = new Thread(new threadGradY());
        threadgradx.start();
    }//GEN-LAST:event_jButtonGradYActionPerformed

    private void jButtonGradXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGradXActionPerformed
        // TODOx add your handling code here:
        threadgradx = new Thread(new threadGradX());
        threadgradx.start();
    }//GEN-LAST:event_jButtonGradXActionPerformed

    private void jButtonResetClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetClearActionPerformed
        // TODO add your handling code here:

        jButtonIn.setEnabled(true);
        jTextFieldInArq.setText("");
        jTextFieldInArq.setEditable(true);
        jButtonOut.setEnabled(false);
        jTextFieldOutArq.setText("");
        jCheckBoxEntireDir.setEnabled(true);

        jSpinnertau.setValue((double) 0.0000);
        jSpinnertau.setEnabled(false);
        jSpinnerdelta.setValue((double) 0.00);
        jSpinnerdelta.setEnabled(false);

        jRadioButtonMeio.setSelected(true);
        jRadioButtonOrigem.setEnabled(false);
        jRadioButtonMeio.setEnabled(false);
        jRadioButtonPonta.setEnabled(false);

        jCheckBoxLOG.setSelected(false);
        jCheckBoxLOG.setEnabled(false);

        jCheckBoxNormalizarMax.setEnabled(false);
        jCheckBoxNormalizarMax.setSelected(true);
        jCheckBoxNormalizarAmp.setEnabled(false);
        jCheckBoxNormalizarAmp.setSelected(false);
        jComboBoxSearch.setEnabled(false);

        jTextFieldl.setText("");
        jTextFieldc.setText("");

        jTextFieldV.setText("");
        jTextFieldL.setText("");
        jTextFieldI.setText("");

        jTextFieldG1.setText("");
        jTextFieldG2.setText("");
        jTextFieldG3.setText("");

        jButtonMatriz.setEnabled(false);
        jButtonGradX.setEnabled(false);
        jButtonGradY.setEnabled(false);
        jButtonCampo.setEnabled(false);
        jButtonCampoAss.setEnabled(false);
        jButtonTriangulacao.setEnabled(false);

        jButtonStartGPA.setEnabled(false);
        jButtonG1g1.setEnabled(false);
        jButtonResetClear.setEnabled(false);

        jButtonMostrarLog.setEnabled(false);
        jButtonNormalizada.setEnabled(false);

        jTextFieldg1.setText("");
        jTextFieldG1g1.setText("");
        jButtonGPAtools.setEnabled(true);
        lines = 0;
    }//GEN-LAST:event_jButtonResetClearActionPerformed

    private void jCheckBoxNormalizarAmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNormalizarAmpActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxNormalizarMax.isSelected()) {
            jCheckBoxNormalizarMax.setSelected(false);
        }
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jCheckBoxNormalizarAmpActionPerformed

    private void jCheckBoxNormalizarMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNormalizarMaxActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxNormalizarAmp.isSelected()) {
            jCheckBoxNormalizarAmp.setSelected(false);
        }
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jCheckBoxNormalizarMaxActionPerformed

    private void jRadioButtonOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonOrigemActionPerformed
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonOrigemActionPerformed

    private void jRadioButtonMeioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMeioActionPerformed
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonMeioActionPerformed

    private void jRadioButtonPontaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPontaActionPerformed
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jRadioButtonPontaActionPerformed

    private void jCheckBoxLOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLOGActionPerformed
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jCheckBoxLOGActionPerformed

    private void jSpinnerdeltaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerdeltaStateChanged
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jSpinnerdeltaStateChanged

    private void jTextFieldInArqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldInArqKeyPressed
        // TODO add your handling code here:
        jButtonOut.setEnabled(true);
        jTextFieldOutArq.setEditable(true);
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jTextFieldInArqKeyPressed

    private void jCheckBoxEntireDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEntireDirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxEntireDirActionPerformed

    private void jButtonMostrarLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarLogActionPerformed
        // TODO add your handling code here:
        threadshowlog = new Thread(new threadShowLog());
        threadshowlog.start();
    }//GEN-LAST:event_jButtonMostrarLogActionPerformed

    private void jButtonNormalizadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNormalizadaActionPerformed
        // TODO add your handling code here:
        threadnormalizada = new Thread(new threadNormalizada());
        threadnormalizada.start();
    }//GEN-LAST:event_jButtonNormalizadaActionPerformed

    private void jSpinnertauStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnertauStateChanged
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jSpinnertauStateChanged

    private void jComboBoxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSearchActionPerformed
        // TODO add your handling code here:
        jButtonStartGPA.setEnabled(true);
    }//GEN-LAST:event_jComboBoxSearchActionPerformed

    private void jButtonGPAtoolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGPAtoolsActionPerformed
        // TODO add your handling code here:
        Wintools tools = new Wintools();
        tools.setLocationRelativeTo(null);
        tools.setTitle("GPA Tools");
        tools.setVisible(true);
        Main.tela.setEnabled(false);
    }//GEN-LAST:event_jButtonGPAtoolsActionPerformed

    private String[] cleaner(String[] col) {
        for (int j = 0; j < col.length; j++) { // Le arquivo
            String s = col[j].toString();
            if (s.length() == 0) {
                for (int i = j; i < col.length - 1; i++) {
                    col[i] = col[i + 1];
                }
                String col1[] = col;
                col = new String[col.length - 1];
                for (int i = 0; i < col.length; i++) {
                    col[i] = col1[i];
                }
            }
        }
        return col;
    }

    void SplitMatrixAlt(String filePath) {
//        10 11 12 13   10 11 12
//        15 16 17 18   13 14 15
//        19 20 21 22   16 17 18
//        23 24 25 26
        jButtonG1g1.setEnabled(false);
        reader = null;
        String col[] = null;
        int cols = 0;
        ArrayList<waypoint> window_ref = new ArrayList<waypoint>();
        Vector vetor = new Vector();
        double matrix[][] = null;

//        filePath = Main.filePath;
        {
            String[] temp = null;
            temp = filePath.split("/");
            int end = temp.length;
            destiny = temp[end - 1].toString();
            end = destiny.length();
            destiny = destiny.substring(0, end - 4);
            destiny = destiny + "/";
            String temp2 = "";
            for (int i = 0; i < temp.length - 1; i++) {
                temp2 = temp2 + temp[i] + "/";
            }
            destiny = temp2 + destiny;
            boolean success = (new File(destiny)).mkdirs();
        }

        try {
            reader = new FileReader(new File(filePath));
            leitor = new BufferedReader(reader);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            while ((linha = leitor.readLine()) != null) {
                col = linha.split(" ");
                col = cleaner(col);
                for (int j = 0; j < col.length; j++) { // Le arquivo
                    String s = col[j].toString();
                    if (s.length() != 0) {
                        double d = Double.valueOf(s);
                        vetor.add(s);
//                        System.out.println(j);
                    }
                }
                lines++;
            }
            cols = col.length;
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            leitor.close();
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Carrega matriz
        matrix = new double[lines][cols];
        int idx = 0;
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < col.length; j++) {
                matrix[i][j] = Double.valueOf(vetor.elementAt(idx++).toString());
            }
        }
        for (int i = 0; i < lines; i++) { // Seta waypoints
            for (int j = 0; j < col.length; j++) {
                w1 = new waypoint();
                w1.x = i;
                w1.y = j;
                window_ref.add(w1);
            }
        }
        int p = 0;
        for (int k = 0; k <= window_ref.size() - 9; k++) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    w1 = window_ref.get(k + p++);
                    mx[i][j] = matrix[w1.x][w1.y];
                    System.out.println(mx[i][j]);
                }
            }
            Save2file(mx, k);
            p = 0;
        }
    }

    void SplitMatrix(String filePath) {
//        10 11 12 13   10 11 12
//        15 16 17 18   15 16 17
//        19 20 21 22   19 20 21
//        23 24 25 26
        jButtonG1g1.setEnabled(false);
        reader = null;
        String col[] = null;
        int cols = 0;
        ArrayList<waypoint> window_ref = new ArrayList<waypoint>();
        Vector vetor = new Vector();
        double matrix[][] = null;

//        filePath = Main.filePath;
        {
            String[] temp = null;
            temp = filePath.split("/");
            int end = temp.length;
            destiny = temp[end - 1].toString();
            end = destiny.length();
            destiny = destiny.substring(0, end - 4);
            destiny = destiny + "/";
            String temp2 = "";
            for (int i = 0; i < temp.length - 1; i++) {
                temp2 = temp2 + temp[i] + "/";
            }
            destiny = temp2 + destiny;
            boolean success = (new File(destiny)).mkdirs();
        }

        try {
            reader = new FileReader(new File(filePath));
            leitor = new BufferedReader(reader);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            while ((linha = leitor.readLine()) != null) {
                col = linha.split(" ");
                col = cleaner(col);
                for (int j = 0; j < col.length; j++) { // Le arquivo
                    String s = col[j].toString();
                    if (s.length() != 0) {
                        double d = Double.valueOf(s);
                        vetor.add(s);
//                        System.out.println(j);
                    }
                }
                lines++;
            }
            cols = col.length;
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            leitor.close();
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Carrega matriz
        matrix = new double[lines][cols];
        int idx = 0;
        for (int i = 0; i < lines; i++) {
            for (int j = 0; j < col.length; j++) {
                matrix[i][j] = Double.valueOf(vetor.elementAt(idx++).toString());
            }
        }
        for (int i = 0; i < lines - 2; i++) { // Seta waypoints
            for (int j = 0; j < col.length - 2; j++) {
                w1 = new waypoint();
                w1.x = i;
                w1.y = j;
                window_ref.add(w1);
            }
        }
        for (int k = 0; k < window_ref.size(); k++) {
            w1 = window_ref.get(k);
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    mx[i][j] = matrix[w1.x + i][w1.y + j];
                }
            }
            Save2file(mx, k);
        }
    }

    private void Save2file(double[][] mx, int k) {
        try {
            file = new FileOutputStream(destiny + String.valueOf(k) + ".dat", false);
            dados = new DataOutputStream(new BufferedOutputStream(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    DecimalFormat decimal = new DecimalFormat("###.#######");
                    String s = decimal.format(mx[i][j]).replace(",", ".");
                    dados.writeBytes(s);
                    if (j < 2) {
                        dados.writeBytes(" ");
                    }
                }
                if (i < 2) {
                    dados.writeBytes("\n");
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            dados.close();
            file.close();
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButtonG1g1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonG1g1ActionPerformed
        // TODO add your handling code here:
        GPAit(Main.filePath);
//        SplitMatrix(Main.filePath);
        SplitMatrixAlt(Main.filePath);
        GPAit(destiny);

        Vector vetor = new Vector();
        DecimalFormat g1format = new DecimalFormat("#.####");

        String name[] = destiny.split("/");
        filePath = name[name.length - 1];

        filePath = destiny + "gpa++_results_" + filePath + ".txt";

        try {
            reader = new FileReader(new File(filePath));
            leitor = new BufferedReader(reader);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
//        String s;
        try {
            while ((linha = leitor.readLine()) != null) {
                String[] col = linha.split("\t");
                String s = col[0].toString();
                if (!s.equals("#")) {
                    vetor.add(col[1].toString());
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            leitor.close();
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
        }
//        }
        double sum = 0;
        double d[] = new double[vetor.size()];
        for (int i = 0; i < vetor.size(); i++) {
            d[i] = Double.valueOf(vetor.get(i).toString());
            sum = sum + d[i];
        }
        double g1 = sum / (double) vetor.size();
        String valg1 = g1format.format(g1).replace(",", ".");
        jTextFieldg1.setText(valg1);

        destiny = destiny.substring(0, destiny.length() - 1);

        double G1 = bringG1(destiny + "_gpa++_OUT/Resultados.dat");
        double G1g1 = G1 - g1;
        String valG1g1 = g1format.format(G1g1).replace(",", ".");
        jTextFieldG1g1.setText(valG1g1);

        { // Salva valor de G1g1 em arquivo.
            try {
                file = new FileOutputStream(destiny + "/G1g1.txt", false);
                dados = new DataOutputStream(new BufferedOutputStream(file));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                String s = "<g1>: " + valg1;
                s = s + "\nG1-<g1>: " + valG1g1;
                dados.writeBytes(s);

            } catch (IOException ex) {
                Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                dados.close();
                file.close();
            } catch (IOException ex) {
                Logger.getLogger(Wintools.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonG1g1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Window().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAbout;
    private javax.swing.JButton jButtonCampo;
    private javax.swing.JButton jButtonCampoAss;
    private javax.swing.JButton jButtonG1g1;
    private javax.swing.JButton jButtonGPAtools;
    private javax.swing.JButton jButtonGradX;
    private javax.swing.JButton jButtonGradY;
    private javax.swing.JButton jButtonIn;
    private javax.swing.JButton jButtonMatriz;
    private javax.swing.JButton jButtonMostrarLog;
    private javax.swing.JButton jButtonNormalizada;
    private javax.swing.JButton jButtonOut;
    private javax.swing.JButton jButtonResetClear;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonStartGPA;
    private javax.swing.JButton jButtonTriangulacao;
    private javax.swing.JCheckBox jCheckBoxEntireDir;
    private javax.swing.JCheckBox jCheckBoxLOG;
    private javax.swing.JCheckBox jCheckBoxNormalizarAmp;
    private javax.swing.JCheckBox jCheckBoxNormalizarMax;
    private javax.swing.JComboBox jComboBoxSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButtonMeio;
    private javax.swing.JRadioButton jRadioButtonOrigem;
    private javax.swing.JRadioButton jRadioButtonPonta;
    private javax.swing.JSpinner jSpinnerdelta;
    private javax.swing.JSpinner jSpinnertau;
    private javax.swing.JTextField jTextFieldG1;
    private javax.swing.JTextField jTextFieldG1g1;
    private javax.swing.JTextField jTextFieldG2;
    private javax.swing.JTextField jTextFieldG3;
    private javax.swing.JTextField jTextFieldI;
    private javax.swing.JTextField jTextFieldInArq;
    private javax.swing.JTextField jTextFieldL;
    private javax.swing.JTextField jTextFieldOutArq;
    private javax.swing.JTextField jTextFieldV;
    private javax.swing.JTextField jTextFieldc;
    private javax.swing.JTextField jTextFieldg1;
    private javax.swing.JTextField jTextFieldl;
    private javax.swing.ButtonGroup triangpoint;
    // End of variables declaration//GEN-END:variables

    void ReadConfFromFile() {
        FileReader reader = null;
        BufferedReader leitor = null;
        String linha = null;
        String dados = null;
        String conffile = "/home/cristiano/GPA++/bin/gpa++.conf";
        try {
            reader = new FileReader(new File(conffile));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        leitor = new BufferedReader(reader);
    }

    private void WriteConf2File(String tau, String delta, String log, String norm, String ref, String inv) {
        String arquivo, confs;
        arquivo = Main.home + "/GPA++/bin/gpa++.conf";

        confs = "tau " + tau + " # tolerância no módulo para remoção dos vetores simétricos\n";
        confs = confs + "delta " + delta + " # tolerância na fase em graus\n";
        confs = confs + "log " + log + " # gerar log de comparações entre pares de vetores\n";
        confs = confs + "rmnodefile on # remover aquivo da triangulação\n";
        confs = confs + "normalizar " + norm + " # normaliza matriz de input\n";
        confs = confs + "vectorreference " + ref + " # origem:meio:ponta posicao no vetor para triangular\n";
        confs = confs + "symmetrysearch " + inv + " # on:off procura pares simétricos com v2 iniciando no final da matriz, on\n";

        FileOutputStream file = null;
        DataOutputStream dados = null;
        try {
            file = new FileOutputStream(arquivo, false);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        dados = new DataOutputStream(new BufferedOutputStream(file));
        try {
            dados.writeBytes(confs);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            dados.flush();
            dados.close();
            file.flush();
            file.close();
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
